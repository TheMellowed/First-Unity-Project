using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Movement : MonoBehaviour
{
    [SerializeField] private CharacterController controller;

    [SerializeField] private float speed, gravity, jumpHeight;
    [SerializeField] private int jumpCount;

    [SerializeField] private Transform groundCheck;
    [SerializeField] private float groundDistance;
    [SerializeField] private LayerMask groundMask;

    Vector3 velocity = new Vector3();
    bool isGrounded, canJump;
    int remainingJumps;

    // Update is called once per frame
    void Update()
    {
        isGrounded = Physics.CheckSphere(groundCheck.position, groundDistance, groundMask);

        if (isGrounded) {
            remainingJumps = jumpCount; // reset remaining jumps when on ground
            if (velocity.y < 0)
            {
                velocity.y = -2f;
            }
        }

        float x = Input.GetAxis("Horizontal");
        float z = Input.GetAxis("Vertical");

        Vector3 move = transform.right * x + transform.forward * z;

        controller.Move(move * speed * Time.deltaTime);

        if (Input.GetButtonDown("Jump") &&  (isGrounded || canJump)) // more efficient to use 'or' here than reset canJump every frame where player is grounded 
        {
            velocity.y = Mathf.Sqrt(jumpHeight * -2f * gravity);
            remainingJumps --;
            canJump = remainingJumps > 0; // Checks if you have 1 or more jumps left
        }

        velocity.y += gravity * Time.deltaTime;

        controller.Move(velocity * Time.deltaTime);
    }
}

